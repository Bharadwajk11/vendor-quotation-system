I want to build a full-stack vendor quotation comparison app using

Frontend: Angular

Backend: Django REST Framework (DRF)

Database: MySQL

üéØ Goal

My first client is a plastic manufacturing company that buys raw materials (like granules, resins, additives) from different vendors across India.

They want to compare vendor quotations automatically and choose the best vendor based on total cost, delivery price, quality, and grade.

In the future, this same app should work for any industry (like steel, chemicals, food, etc.) ‚Äî so please design it in a multi-industry, multi-company way.

‚öôÔ∏è Core Features

Company Management (for future multi-user setup)

Each company (client) has its own vendors, products, and orders.

Fields: name, industry_type, address, contact_email.

Vendor Management

Add, view, edit vendors for that company.

Fields: name, city, state, rating, contact.

Product Management

Add, view, edit products supplied by vendors.

Fields: name, category, grade/specification, unit_type (kg, liter, piece), unit_price, kilo_price (optional).

Quotation Management

Enter vendor quotations for each product:

vendor

product

product_price (‚Çπ per unit)

delivery_price (‚Çπ total or per unit)

kilo_price (optional)

grade/specification

lead_time_days

Order Request (Comparison Request)

Buyer enters:

product name

quantity

delivery location (city/state)

required date

System finds all matching vendor quotations for that product.

Comparison Engine

Backend calculates:

product_price_per_unit

delivery_per_unit = delivery_price √∑ order_qty

total_cost_per_unit = product_price_per_unit + delivery_per_unit

total_order_cost = total_cost_per_unit √ó order_qty

score = (weighted average of cost, lead time, and grade/quality)

Sort vendors by total cost or best score.

Comparison Table (Frontend View)
Display results in this format:
| Vendor Name | City | Product Price | Delivery Price | Kilo Price | Grade/Spec | Lead Time | Total Cost per Unit | Total Order Cost | Score |

Highlight the best vendor automatically (lowest total cost).

Allow sorting and filtering (e.g., by grade, city, lead time).

Authentication (2 roles)

Admin: can manage all data (vendors, products, quotations).

Buyer: can view vendors and run comparisons.

History / Orders

Save every comparison and selected vendor into an ‚ÄúOrder History‚Äù table.

üßÆ Example Calculation

Example input:

Buyer location: Andhra Pradesh

Order qty: 100

Vendor A (Chennai): product ‚Çπ120/unit, delivery ‚Çπ30 total

Vendor B (Delhi): product ‚Çπ90/unit, delivery ‚Çπ80 total

Steps:

Vendor A delivery per unit = 30 √∑ 100 = 0.30

Vendor B delivery per unit = 80 √∑ 100 = 0.80

Vendor A total = 120 + 0.30 = 120.30

Vendor B total = 90 + 0.80 = 90.80
‚úÖ Vendor B is cheaper ‚Üí recommended.

üß© Database Models (Tables)

Please define Django models like this:

1Ô∏è‚É£ Company

id (Auto)

name (CharField)

industry_type (CharField)

address (CharField)

contact_email (EmailField)

2Ô∏è‚É£ Vendor

id (Auto)

company (ForeignKey ‚Üí Company)

name (CharField)

city (CharField)

state (CharField)

rating (FloatField, optional)

contact (CharField, optional)

3Ô∏è‚É£ Product

id (Auto)

company (ForeignKey ‚Üí Company)

name (CharField)

category (CharField)

grade_spec (CharField)

unit_type (CharField)

unit_price (DecimalField, optional)

kilo_price (DecimalField, optional)

4Ô∏è‚É£ Quotation

id (Auto)

vendor (ForeignKey ‚Üí Vendor)

product (ForeignKey ‚Üí Product)

product_price (DecimalField)

delivery_price (DecimalField)

kilo_price (DecimalField, optional)

grade_spec (CharField)

lead_time_days (IntegerField)

created_at (DateTimeField, auto_now_add=True)

5Ô∏è‚É£ OrderRequest

id (Auto)

company (ForeignKey ‚Üí Company)

product (ForeignKey ‚Üí Product)

order_qty (IntegerField)

delivery_location (CharField)

required_date (DateField)

6Ô∏è‚É£ ComparisonResult

id (Auto)

order_request (ForeignKey ‚Üí OrderRequest)

vendor (ForeignKey ‚Üí Vendor)

total_cost_per_unit (DecimalField)

total_order_cost (DecimalField)

score (FloatField)

rank (IntegerField)

üõ†Ô∏è API Endpoints (DRF)

/api/companies/ ‚Äî CRUD

/api/vendors/ ‚Äî CRUD

/api/products/ ‚Äî CRUD

/api/quotes/ ‚Äî CRUD

/api/orders/ ‚Äî CRUD

/api/compare/ ‚Äî POST ‚Üí computes vendor comparison
Input:

{
  "product_id": 1,
  "order_qty": 100,
  "delivery_location": "Andhra Pradesh"
}


Output:
List of vendors with: vendor_name, product_price, delivery_price, total_cost_per_unit, total_order_cost, score, rank.

üé® Frontend (Angular)

Dashboard with tabs:

Vendors

Products

Quotations

Compare Vendors

Order History

Add/Update forms for each section.

‚ÄúCompare Vendors‚Äù page ‚Üí enter order details ‚Üí show comparison table.

Use Angular Material components or Tailwind CSS for design.

üíæ Database

Use MySQL

Add seed data:

3 vendors (e.g., Chennai, Delhi, Mumbai)

2 products

5 quotations for testing.

‚úÖ Deliverables

Full working DRF backend connected to MySQL

Angular frontend connected to backend via REST API

CRUD pages for vendors/products/quotes/orders

Comparison logic (best vendor ranking) implemented

Clean, commented code with setup instructions

Ready for future multi-company scaling

üöÄ Optional Future Features

Multi-company login (SaaS model)

Distance-based delivery estimation using Google Maps API

Vendor performance analytics (on-time %)

AI-based best vendor prediction

‚úÖ What to tell Replit if it asks you something:

If Replit AI asks ‚ÄúShould I start with the backend or frontend?‚Äù, reply:

‚ÄúStart with Django REST Framework backend ‚Äî create all models, serializers, and APIs first.‚Äù

Then once backend works, say:

‚ÄúNow create the Angular frontend and connect it to the DRF APIs.‚Äù